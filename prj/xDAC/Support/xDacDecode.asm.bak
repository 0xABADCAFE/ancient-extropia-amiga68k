
; Storm C Compiler
; Mendoza:Extropia/eXtropia/prj/xDAC/xDacDecode.cpp
	mc68040

	XREF	Zero__MEM__PvUi
	XREF	Frame__XDAC__Tj

	SECTION "_0ct__streampos__T:0",CODE
	rts

	SECTION "DecodeFrames__XDAC__TPsjj:0",CODE
	XDEF	DecodeFrames__XDAC__TPsjj

DecodeFrames__XDAC__TPsjj


L130	EQU	-$50
	link	a5,#L130
	movem.l	d2-d7/a2/a3/a6,-(a7)
	movem.l	$10(a5),d0/d2
	move.l	$C(a5),a2
	move.l	$8(a5),a6


L99
;	if (!num)
	tst.l	d2
	bne.b	L101


L100
;		num = shared.numFrames;
	move.l	$20(a6),d2


L101
;	if (start)
	tst.l	d0
	beq.b	L103


L102
;		Frame(start);
	move.l	d0,-(a7)
	move.l	a6,-(a7)
	jsr	Frame__XDAC__Tj
	addq.w	#$8,a7


L103
;	if (shared.channels==1)
	move.w	$26(a6),d0
	cmp.w	#1,d0
	bne	L114


L104
;	d = dest;
;	n = num+1;
	move.l	d2,d0
	addq.l	#1,d0
	move.l	d0,-4(a5)

;	while(--n)
	bra	L112


L105
;	c = *current++;
	move.l	a6,a1
	move.l	$34(a1),a1
	lea	2(a1),a0
	move.l	a6,a3
	move.l	a0,$34(a3)

	move.w	(a1),d2	; d2 == header

;	if (XDAC_SILENCE(c))
	moveq	#0,d0
	move.w	d2,d0
	and.l	#$8000,d0
	beq.b	L107


L106
;	f = XDAC_SLNC_LEN(c);
	moveq	#0,d0
	move.w	d2,d0
	and.l	#$FFF,d0
	move.w	d0,d3

;	s = shared.frameLen*f;
	move.w	$24(a6),d2
	mulu	d3,d2

;	MEM::Zero(d,s);
	move.l	d2,-(a7)
	move.l	a2,-(a7)
	jsr	Zero__MEM__PvUi
	addq.w	#$8,a7

;	d += s;
	move.l	d2,d0
	moveq	#1,d2
	asl.l	d2,d0
	add.l	d0,a2

;	n -= (f-1);
	moveq	#0,d0
	move.w	d3,d0
	subq.l	#1,d0
	sub.l	d0,-4(a5)
	bra	L112

;////////////////////////////////////////////////////////////////////////////////////////////
;//
;//	Hand optimised code for inner loop listed below
;//	{
;//		rsint16		bitRate = XDAC_BITRATE(c);
;//		ruint16		mask		= (1<<bitRate)-1;
;//		rsint16		shiftMx	= ((8*sizeof(sint16))/bitRate);
;//		rsint16		shifted	= shiftMx;
;//		rsint16 	sample	= *((sint16*)current++);
;//		rsint16*	qTable	= (sint16*)current;
;//		ruint16*	cmpDat	= current+XDAC_TABLESIZE(c);
;//		*d++ = (sint16)sample;
;//		ruint16 packed = *cmpDat++;
;//		rsint16	i = shared.frameLen;
;//		while(--i)
;//		{
;//			sample += qTable[(packed & mask)];
;//			*d++ = sample;
;//			packed >>= bitRate;
;//			if (--shifted==0)
;//			{
;//				shifted = shiftMx;
;//				packed = *cmpDat++;
;//			}
;//		}
;//	}
;//
;// frame constants
;//	d5 == bitRate
;//	d6 == mask
;//	d7 == shiftMx
;//
;//	frame vars
;//	d0 == packed
;//	d1 == shifted
;//	d2 == scratch/frame Header
;//	d3 == sample
;//	d4 == sample counter
;//
;//	my pointers
;//	a0 == cmpDat
;// a1 == scratch
;//	a2 == dest
;//	a3 == qTable
;//
;// compiler/machine pointers
;// a5 == stack frame
;// a6 == this
;// a7 == usp/ssp
;//
;////////////////////////////////////////////////////////////////////////////////////////////

L107

;	bitRate = XDAC_BITRATE(c) -> d5 (32)
	move.w	d2,d5
	and.w	#$300,d5
	lsr.w	#8,d5
	addq.w	#2,d5
	ext.l	d5

;	mask = (1<<bitRate)-1 -> d6 (32)
	moveq	#1,d6
	lsl.l	d5,d6
	subq.l	#1,d6

;	shiftMx	= ((8*sizeof(sint16))/bitRate) -> d7 (32)
	moveq	#$10,d7
	divu	d5,d7
	ext.l	d7;

;	shifted	= shiftMx	-> d1 (16)
	move.w	d7,d1

;	sample	= *((sint16*)current++); -> d3 (16)
	move.l	a6,a1
	move.l	$34(a1),a1
	lea	2(a1),a0
	move.l	a6,a3
	move.l	a0,$34(a3)
	move.w	(a1),d3

;	qTable	= (sint16*)current; -> a3
	move.l	a6,a0
	movea.l $34(a0), a3;

;	cmpDat	= current+XDAC_TABLESIZE(c)
	move.l	a6,a1
	move.l	$34(a1),a0
	moveq	#0,d0

	move.w	d2,d0
	and.l	#$1F,d0
	lea	2(a0),a0
	lea	0(a0,d0.l*2),a0

;	*d++ = (sint16)sample;
	move.w	d3,(a2)+

;	packed = *cmpDat++ -> d0
	move.w	(a0)+,d0

;	i = shared.frameLen -> d4
	move.w	$24(a6),d4

;	while(--i)
	bra.b	L110

	; done with d2==frame header
	; d2 == scratch reg

L108
;	sample += qTable[(packed & mask)];

	move.w	d0,d2
	and.w	d6,d2; packed & mask -> d2

	add.w	0(a3,d2.w*2),d3;	d3 += qTable[(packed & mask)]

;	*d++ = sample;
	move.w	d3,(a2)+

;	packed(d0) >>= bitRate(d5);
	lsr.w	d5,d0

;	if (--shifted==0)
	subq.w	#1,d1
	tst.w	d1
	bne.b	L110


L109
;	shifted = shiftMx;
	move.w	d7,d1

;	packed = *cmpDat++;
	move.w	(a0)+,d0


L110
	subq.w	#1,d4 ; d4 == sample number
	tst.w	d4
	bne.b	L108

L111
;	current = cmpDat;
	move.l	a6,a1
	move.l	a0,$34(a1)

;	frameNum++;
	move.l	a6,a0
	move.l	$38(a0),d0
	addq.l	#1,d0
	move.l	a6,a0
	move.l	d0,$38(a0)


L112
	subq.l	#1,-4(a5)
	tst.l	-4(a5)
	bne	L105


L113
	moveq	#0,d0
	movem.l	(a7)+,d2-d7/a2/a3/a6
	unlk	a5
	rts

;////////////////////////////////////////////////////////////////////////////////////////


L114
;	rsint16* d = dest;
;	rsint32	n = num+1;
	move.l	d2,d0
	addq.l	#1,d0
	move.l	d0,-4(a5)

;	while(--n)
	bra	L128


L115
;	ruint16 c = *current++;
	move.l	a6,a1
	move.l	$34(a1),a1
	lea	2(a1),a0
	move.l	a6,a3
	move.l	a0,$34(a3)
	move.w	(a1),d3

;	if (XDAC_SILENCE(c))
	moveq	#0,d0
	move.w	d3,d0
	and.l	#$8000,d0
	beq.b	L117


L116
;	ruint16 f = XDAC_SLNC_LEN(c);
	moveq	#0,d0
	move.w	d3,d0
	and.l	#$FFF,d0
	move.w	d0,d3

;	rsint32 s = shared.frameLen*shared.channels*f;
	move.w	$24(a6),d2
	mulu	$26(a6),d2
	moveq	#0,d0
	move.w	d3,d0
	mulu.l	d0,d2

;	MEM::Zero(d,s);
	move.l	d2,-(a7)
	move.l	a2,-(a7)
	jsr	Zero__MEM__PvUi
	addq.w	#$8,a7

;	d += s;
	move.l	d2,d0
	moveq	#1,d2
	asl.l	d2,d0
	add.l	d0,a2

;	n -= (f-1);
	moveq	#0,d0
	move.w	d3,d0
	subq.l	#1,d0
	sub.l	d0,-4(a5)
	bra	L128


;////////////////////////////////////////////////////////////////////////////////////////////
;//
;//
;//	{
;//		sint16		sample[4];
;//		{
;//			for (rsint16 c=0, *s=sample; c<shared.channels; c++)
;//				*d++ = *s++ = *((sint16*)current)++;
;//		}
;//		{
;//			rsint16*	qTable	= (sint16*)current;
;//			ruint16*	cmpDat	= current+XDAC_TABLESIZE(c);
;//			rsint16		i		= shared.frameLen;
;//
;//			sint16		bitRate	= XDAC_BITRATE(c);
;//			sint16		shiftMx	= ((8*sizeof(sint16))/bitRate);
;//			uint16		mask		= (1<<bitRate)-1;
;//			sint16		shifted	= shiftMx;
;//			ruint16		packed	= *cmpDat++;
;//
;//			while (--i)
;//			{
;//				for(rsint16 c=0; c<shared.channels; c++)
;//				{
;//					rsint16 s = sample[c] + qTable[(packed&mask)];
;//					*d++ = sample[c] = s;
;//					packed >>= bitRate;
;//					if (--shifted==0)
;//					{
;//						shifted = shiftMx;
;//						packed = *cmpDat++;
;//					}
;//				}
;//			}
;//			current = cmpDat;
;//			frameNum++;
;//		}
;//	}
;//
;////////////////////////////////////////////////////////////////////////////////////////////

L117
;	for (rsint16 c=0, *s=sample;
	moveq	#0,d0
	lea	-$1A(a5),a1
	bra.b	L119


L118
;	*d++ = *s++ = *((sint16*)current)++;
	move.l	a6,a3
	move.l	$34(a3),-$3C(a5)
	move.l	-$3C(a5),a0
	lea	2(a0),a0
	move.l	a6,a3
	move.l	a0,$34(a3)
	move.l	-$3C(a5),a0
	move.w	(a0),d1
	move.w	d1,(a1)+
	move.w	d1,(a2)+
	addq.w	#1,d0


L119
	move.w	d0,d2
	ext.l	d2
	moveq	#0,d1
	move.w	$26(a6),d1
	cmp.l	d1,d2
	blt.b	L118


L120
;	rsint16*	qTable	= (sint16*)current;
	move.l	a6,a0
	move.l	$34(a0),-$38(a5)

;	ruint16*	cmpDat	= current+XDAC_TABLESIZE(c);
	move.l	a6,a1
	move.l	$34(a1),a0
	moveq	#0,d0
	move.w	d3,d0
	and.l	#$1F,d0
	lea	2(a0),a0
	lea	0(a0,d0.l*2),a0

;	rsint16		i = shared.frameLen;
	move.w	$24(a6),-$30(a5)

;	sint16		bitRate	= XDAC_BITRATE(c);
	moveq	#0,d0
	move.w	d3,d0
	and.l	#$300,d0
	moveq	#$8,d1
	asr.l	d1,d0
	addq.l	#2,d0
	move.w	d0,d6

;	sint16		shiftMx	= ((8*sizeof(sint16))/bitRate);
	move.w	d6,d0
	ext.l	d0
	moveq	#$10,d1
	divul.l	d0,d1
	move.w	d1,d7

;	uint16		mask		= (1<<bitRate)-1;
	move.w	d6,d0
	ext.l	d0
	moveq	#1,d1
	asl.l	d0,d1
	move.l	d1,d0
	subq.l	#1,d0
	move.w	d0,-$24(a5)

;	sint16		shifted	= shiftMx;
	move.w	d7,d2

;	ruint16		packed	= *cmpDat++;
	move.w	(a0)+,d1

;	while (--i)
	bra.b	L126


L121
;	for(rsint16 c=0;
	moveq	#0,d0
	bra.b	L125


L122
;	rsint16 s = sample[c] + qTable[(packed&mask)];
	move.w	d0,d3
	ext.l	d3
	lea	-$1A(a5),a1
	move.w	0(a1,d3.l*2),d3
	ext.l	d3
	moveq	#0,d4
	move.w	d1,d4
	moveq	#0,d5
	move.w	-$24(a5),d5
	and.l	d5,d4
	move.l	-$38(a5),a3
	move.w	0(a3,d4.l*2),d4
	ext.l	d4
	add.l	d4,d3

;	*d++ = sample[c] = s;
	move.w	d0,d4
	ext.l	d4
	lea	-$1A(a5),a1
	move.w	d3,0(a1,d4.l*2)
	move.w	d3,(a2)+

;	packed >>= bitRate;
	lsr.w	d6,d1

;	if (--shifted==0)
	subq.w	#1,d2
	tst.w	d2
	bne.b	L124


L123
;	shifted = shiftMx;
	move.w	d7,d2

;	packed = *cmpDat++;
	move.w	(a0)+,d1


L124
	addq.w	#1,d0


L125
	move.w	d0,d4
	ext.l	d4
	moveq	#0,d3
	move.w	$26(a6),d3
	cmp.l	d3,d4
	blt.b	L122


L126
	subq.w	#1,-$30(a5)
	tst.w	-$30(a5)
	bne.b	L121


L127
;	current = cmpDat;
	move.l	a6,a1
	move.l	a0,$34(a1)

;	frameNum++;
	move.l	a6,a0
	move.l	$38(a0),d0
	addq.l	#1,d0
	move.l	a6,a0
	move.l	d0,$38(a0)


L128
	subq.l	#1,-4(a5)
	tst.l	-4(a5)
	bne	L115


L129
	moveq	#0,d0
	movem.l	(a7)+,d2-d7/a2/a3/a6
	unlk	a5
	rts

	END
